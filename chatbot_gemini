import os
import warnings
from scraper import scraper
from langchain.chains import RetrievalQA

warnings.filterwarnings("ignore")

API_KEY = 'AIzaSyAhJFxbj1d0iaj_d4H4i1USleWhpqwZpoM'


from langchain_google_genai import ChatGoogleGenerativeAI

model = ChatGoogleGenerativeAI(model="gemini-pro", google_api_key=API_KEY,
                               temperature=0.1,convert_system_message_to_human=True)

from langchain_google_genai import GoogleGenerativeAIEmbeddings

embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001",google_api_key=API_KEY)

#Vector

from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma

#data = scraper(input("url"))

data = scraper("https://en.wikipedia.org/wiki/Artificial_intelligence")

text_splitter = RecursiveCharacterTextSplitter(chunk_size=10000, chunk_overlap=1000)
# context = "\n\n".join(str(p.page_content) for p in pages)

datas = "".join(data)
texts = text_splitter.split_text(datas)
vector_index = Chroma.from_texts(texts, embeddings).as_retriever()

from langchain_core.prompts import PromptTemplate

template = """Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know
        {context}
        Question: {question}
        Helpful Answer:"""


QA_CHAIN_PROMPT = PromptTemplate.from_template(template)

qa_chain = RetrievalQA.from_chain_type(
            model,
            retriever=vector_index,
            return_source_documents=True,
            chain_type_kwargs={"prompt":QA_CHAIN_PROMPT}
        )

while True:
  try:
      question = input("You: ")
      result = qa_chain({"query": question})
      print("Chatbot: ",result["result"])
  except KeyboardInterrupt:
            break